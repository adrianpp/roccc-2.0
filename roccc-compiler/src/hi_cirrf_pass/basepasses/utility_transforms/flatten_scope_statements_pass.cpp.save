#include "common/system_specific.h"
#include <common/suif_copyright.h>

#include <iostream>
#include <iokernel/cast.h>
#include <iokernel/clone_stream.h>
#include <basicnodes/basic_factory.h>
#include <suifnodes/suif.h>
#include <suifnodes/suif_factory.h>
#include <basicnodes/basic.h>
#include <basicnodes/basic_constants.h>
#include <suifkernel/suifkernel_messages.h>
#include <suifkernel/utilities.h>
#include <suifkernel/group_walker.h>
#include "transforms/procedure_walker_utilities.h"
#include <utils/expression_utils.h>
#include <utils/symbol_utils.h>
#include <utils/type_utils.h>
#include <utils/cloning_utils.h>

#include "common/suif_list.h"
#include "flatten_scope_statements_pass.h"

/**************************** Declarations ************************************/

class fssp_scope_statement_walker : public SelectiveWalker {
public:
    fssp_scope_statement_walker(SuifEnv *the_env)
        : SelectiveWalker(the_env, ScopeStatement::get_class_name()) {}

    Walker::ApplyStatus operator () (SuifObject *x);
};

class fssp_store_variable_statement_walker : public SelectiveWalker {
public:
    fssp_store_variable_statement_walker(SuifEnv *the_env)
        : SelectiveWalker(the_env, StoreVariableStatement::get_class_name()) {}

    Walker::ApplyStatus operator () (SuifObject *x);
};

class fssp_load_variable_expression_walker : public SelectiveWalker {
public:
    fssp_load_variable_expression_walker(SuifEnv *the_env)
        : SelectiveWalker(the_env, LoadVariableExpression::get_class_name()) {}

    Walker::ApplyStatus operator () (SuifObject *x);
};

/**************************** Implementations ************************************/

FlattenScopeStatementsPass::FlattenScopeStatementsPass( SuifEnv* suif_env) : 
				PipelinablePass( suif_env, "FlattenScopeStatementsPass" ) {}


void FlattenScopeStatementsPass::do_procedure_definition(ProcedureDefinition *proc_def){
    if(proc_def){
        fssp_scope_statement_walker walker(get_suif_env());
        proc_def->walk(walker);
    }
}


Walker::ApplyStatus fssp_scope_statement_walker::operator () (SuifObject *x){



    fssp_store_variable_statement_walker walker(get_suif_env());
    proc_def->walk(walker);
    fssp_load_variable_expression_walker walker2(get_suif_env());
    proc_def->walk(walker2);

    return Walker::Continue;
};

Walker::ApplyStatus fssp_scope_statement_walker::operator () (SuifObject *x){



    return Walker::Continue;
};

Walker::ApplyStatus fssp_scope_statement_walker::operator () (SuifObject *x){



    return Walker::Continue;
};


