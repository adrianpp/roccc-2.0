#ifndef _H_MESSAGE_LOGGER_H__
#define _H_MESSAGE_LOGGER_H__

#include <string>
#include <vector>
#include <sstream>

namespace ROCCC {

//implemented to store and handle the internal representation of the data
class MessageLoggerImpl;

//Provides a method for the data generated by ROCCC lowend to be written to html for the user
class MessageLogger {
  //internal constructor, singleton pattern
  MessageLogger();
  static MessageLogger* instance;
  //stores the internal representation of the logged data
  MessageLoggerImpl* data;
public:
  //get the singleton
  static MessageLogger* getInstance();
  //log a string of info that relates to a given section, divided further into subsections etc
  void log(std::vector<std::string> section, std::string info);
  //after all is said and done, the data should be written to disk
  std::string printLog();
};

#define LOG_MESSAGE0(info) \
{std::stringstream ss_LOG_MESSAGE0;\
ss_LOG_MESSAGE0 << info;\
ROCCC::logMessage(ss_LOG_MESSAGE0.str());\
}
#define LOG_MESSAGE1(section, info) \
{std::stringstream ss_LOG_MESSAGE1;\
ss_LOG_MESSAGE1 << info;\
ROCCC::logMessage(section, ss_LOG_MESSAGE1.str());\
}
#define LOG_MESSAGE2(section, subsection, info) \
{std::stringstream ss_LOG_MESSAGE2;\
ss_LOG_MESSAGE2 << info;\
ROCCC::logMessage(section, subsection, ss_LOG_MESSAGE2.str());\
}

//helper function to aid in creating a message with a global section
void logMessage(std::string info);
//helper function to aid in creating a message with a single section
void logMessage(std::string section1, std::string info);
//helper function to aid in creating a message with a section and a subsection
void logMessage(std::string section1, std::string subsection1, std::string info);

}

#endif
